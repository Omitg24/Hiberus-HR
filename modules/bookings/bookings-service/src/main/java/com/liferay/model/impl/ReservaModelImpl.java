/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.liferay.model.impl;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;
import com.liferay.exportimport.kernel.lar.StagedModelType;
import com.liferay.model.Reserva;
import com.liferay.model.ReservaModel;
import com.liferay.petra.string.StringBundler;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.User;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.service.UserLocalServiceUtil;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.PortalUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringUtil;

import java.io.Serializable;

import java.lang.reflect.InvocationHandler;

import java.sql.Blob;
import java.sql.Types;

import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.Map;
import java.util.Objects;
import java.util.function.BiConsumer;
import java.util.function.Function;

/**
 * The base model implementation for the Reserva service. Represents a row in the &quot;BOOKINGS_Reserva&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface <code>ReservaModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link ReservaImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see ReservaImpl
 * @generated
 */
@JSON(strict = true)
public class ReservaModelImpl
	extends BaseModelImpl<Reserva> implements ReservaModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a reserva model instance should use the <code>Reserva</code> interface instead.
	 */
	public static final String TABLE_NAME = "BOOKINGS_Reserva";

	public static final Object[][] TABLE_COLUMNS = {
		{"uuid_", Types.VARCHAR}, {"idReserva", Types.BIGINT},
		{"groupId", Types.BIGINT}, {"companyId", Types.BIGINT},
		{"userId", Types.BIGINT}, {"userName", Types.VARCHAR},
		{"createDate", Types.TIMESTAMP}, {"modifiedDate", Types.TIMESTAMP},
		{"nombre", Types.VARCHAR}, {"apellidos", Types.VARCHAR},
		{"email", Types.VARCHAR}, {"idAlojamiento", Types.BIGINT},
		{"fechaEntrada", Types.TIMESTAMP}, {"fechaSalida", Types.TIMESTAMP},
		{"habitaciones", Types.INTEGER}, {"personas", Types.INTEGER}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("uuid_", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("idReserva", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("groupId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("companyId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("createDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("modifiedDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("nombre", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("apellidos", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("email", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("idAlojamiento", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("fechaEntrada", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("fechaSalida", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("habitaciones", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("personas", Types.INTEGER);
	}

	public static final String TABLE_SQL_CREATE =
		"create table BOOKINGS_Reserva (uuid_ VARCHAR(75) null,idReserva LONG not null primary key,groupId LONG,companyId LONG,userId LONG,userName VARCHAR(75) null,createDate DATE null,modifiedDate DATE null,nombre VARCHAR(75) null,apellidos VARCHAR(75) null,email VARCHAR(75) null,idAlojamiento LONG,fechaEntrada DATE null,fechaSalida DATE null,habitaciones INTEGER,personas INTEGER)";

	public static final String TABLE_SQL_DROP = "drop table BOOKINGS_Reserva";

	public static final String ORDER_BY_JPQL = " ORDER BY reserva.nombre ASC";

	public static final String ORDER_BY_SQL =
		" ORDER BY BOOKINGS_Reserva.nombre ASC";

	public static final String DATA_SOURCE = "liferayDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long COMPANYID_COLUMN_BITMASK = 1L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long GROUPID_COLUMN_BITMASK = 2L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long UUID_COLUMN_BITMASK = 4L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *		#getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long NOMBRE_COLUMN_BITMASK = 8L;

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setEntityCacheEnabled(boolean entityCacheEnabled) {
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setFinderCacheEnabled(boolean finderCacheEnabled) {
	}

	public ReservaModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _idReserva;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setIdReserva(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _idReserva;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return Reserva.class;
	}

	@Override
	public String getModelClassName() {
		return Reserva.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<Reserva, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		for (Map.Entry<String, Function<Reserva, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<Reserva, Object> attributeGetterFunction =
				entry.getValue();

			attributes.put(
				attributeName, attributeGetterFunction.apply((Reserva)this));
		}

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<Reserva, Object>> attributeSetterBiConsumers =
			getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<Reserva, Object> attributeSetterBiConsumer =
				attributeSetterBiConsumers.get(attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept(
					(Reserva)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<Reserva, Object>>
		getAttributeGetterFunctions() {

		return _attributeGetterFunctions;
	}

	public Map<String, BiConsumer<Reserva, Object>>
		getAttributeSetterBiConsumers() {

		return _attributeSetterBiConsumers;
	}

	private static final Map<String, Function<Reserva, Object>>
		_attributeGetterFunctions;
	private static final Map<String, BiConsumer<Reserva, Object>>
		_attributeSetterBiConsumers;

	static {
		Map<String, Function<Reserva, Object>> attributeGetterFunctions =
			new LinkedHashMap<String, Function<Reserva, Object>>();
		Map<String, BiConsumer<Reserva, ?>> attributeSetterBiConsumers =
			new LinkedHashMap<String, BiConsumer<Reserva, ?>>();

		attributeGetterFunctions.put("uuid", Reserva::getUuid);
		attributeSetterBiConsumers.put(
			"uuid", (BiConsumer<Reserva, String>)Reserva::setUuid);
		attributeGetterFunctions.put("idReserva", Reserva::getIdReserva);
		attributeSetterBiConsumers.put(
			"idReserva", (BiConsumer<Reserva, Long>)Reserva::setIdReserva);
		attributeGetterFunctions.put("groupId", Reserva::getGroupId);
		attributeSetterBiConsumers.put(
			"groupId", (BiConsumer<Reserva, Long>)Reserva::setGroupId);
		attributeGetterFunctions.put("companyId", Reserva::getCompanyId);
		attributeSetterBiConsumers.put(
			"companyId", (BiConsumer<Reserva, Long>)Reserva::setCompanyId);
		attributeGetterFunctions.put("userId", Reserva::getUserId);
		attributeSetterBiConsumers.put(
			"userId", (BiConsumer<Reserva, Long>)Reserva::setUserId);
		attributeGetterFunctions.put("userName", Reserva::getUserName);
		attributeSetterBiConsumers.put(
			"userName", (BiConsumer<Reserva, String>)Reserva::setUserName);
		attributeGetterFunctions.put("createDate", Reserva::getCreateDate);
		attributeSetterBiConsumers.put(
			"createDate", (BiConsumer<Reserva, Date>)Reserva::setCreateDate);
		attributeGetterFunctions.put("modifiedDate", Reserva::getModifiedDate);
		attributeSetterBiConsumers.put(
			"modifiedDate",
			(BiConsumer<Reserva, Date>)Reserva::setModifiedDate);
		attributeGetterFunctions.put("nombre", Reserva::getNombre);
		attributeSetterBiConsumers.put(
			"nombre", (BiConsumer<Reserva, String>)Reserva::setNombre);
		attributeGetterFunctions.put("apellidos", Reserva::getApellidos);
		attributeSetterBiConsumers.put(
			"apellidos", (BiConsumer<Reserva, String>)Reserva::setApellidos);
		attributeGetterFunctions.put("email", Reserva::getEmail);
		attributeSetterBiConsumers.put(
			"email", (BiConsumer<Reserva, String>)Reserva::setEmail);
		attributeGetterFunctions.put(
			"idAlojamiento", Reserva::getIdAlojamiento);
		attributeSetterBiConsumers.put(
			"idAlojamiento",
			(BiConsumer<Reserva, Long>)Reserva::setIdAlojamiento);
		attributeGetterFunctions.put("fechaEntrada", Reserva::getFechaEntrada);
		attributeSetterBiConsumers.put(
			"fechaEntrada",
			(BiConsumer<Reserva, Date>)Reserva::setFechaEntrada);
		attributeGetterFunctions.put("fechaSalida", Reserva::getFechaSalida);
		attributeSetterBiConsumers.put(
			"fechaSalida", (BiConsumer<Reserva, Date>)Reserva::setFechaSalida);
		attributeGetterFunctions.put("habitaciones", Reserva::getHabitaciones);
		attributeSetterBiConsumers.put(
			"habitaciones",
			(BiConsumer<Reserva, Integer>)Reserva::setHabitaciones);
		attributeGetterFunctions.put("personas", Reserva::getPersonas);
		attributeSetterBiConsumers.put(
			"personas", (BiConsumer<Reserva, Integer>)Reserva::setPersonas);

		_attributeGetterFunctions = Collections.unmodifiableMap(
			attributeGetterFunctions);
		_attributeSetterBiConsumers = Collections.unmodifiableMap(
			(Map)attributeSetterBiConsumers);
	}

	@JSON
	@Override
	public String getUuid() {
		if (_uuid == null) {
			return "";
		}
		else {
			return _uuid;
		}
	}

	@Override
	public void setUuid(String uuid) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_uuid = uuid;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public String getOriginalUuid() {
		return getColumnOriginalValue("uuid_");
	}

	@JSON
	@Override
	public long getIdReserva() {
		return _idReserva;
	}

	@Override
	public void setIdReserva(long idReserva) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_idReserva = idReserva;
	}

	@JSON
	@Override
	public long getGroupId() {
		return _groupId;
	}

	@Override
	public void setGroupId(long groupId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_groupId = groupId;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public long getOriginalGroupId() {
		return GetterUtil.getLong(this.<Long>getColumnOriginalValue("groupId"));
	}

	@JSON
	@Override
	public long getCompanyId() {
		return _companyId;
	}

	@Override
	public void setCompanyId(long companyId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_companyId = companyId;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public long getOriginalCompanyId() {
		return GetterUtil.getLong(
			this.<Long>getColumnOriginalValue("companyId"));
	}

	@JSON
	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_userId = userId;
	}

	@Override
	public String getUserUuid() {
		try {
			User user = UserLocalServiceUtil.getUserById(getUserId());

			return user.getUuid();
		}
		catch (PortalException portalException) {
			return "";
		}
	}

	@Override
	public void setUserUuid(String userUuid) {
	}

	@JSON
	@Override
	public String getUserName() {
		if (_userName == null) {
			return "";
		}
		else {
			return _userName;
		}
	}

	@Override
	public void setUserName(String userName) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_userName = userName;
	}

	@JSON
	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_createDate = createDate;
	}

	@JSON
	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	public boolean hasSetModifiedDate() {
		return _setModifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_setModifiedDate = true;

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_modifiedDate = modifiedDate;
	}

	@JSON
	@Override
	public String getNombre() {
		if (_nombre == null) {
			return "";
		}
		else {
			return _nombre;
		}
	}

	@Override
	public void setNombre(String nombre) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_nombre = nombre;
	}

	@JSON
	@Override
	public String getApellidos() {
		if (_apellidos == null) {
			return "";
		}
		else {
			return _apellidos;
		}
	}

	@Override
	public void setApellidos(String apellidos) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_apellidos = apellidos;
	}

	@JSON
	@Override
	public String getEmail() {
		if (_email == null) {
			return "";
		}
		else {
			return _email;
		}
	}

	@Override
	public void setEmail(String email) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_email = email;
	}

	@JSON
	@Override
	public long getIdAlojamiento() {
		return _idAlojamiento;
	}

	@Override
	public void setIdAlojamiento(long idAlojamiento) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_idAlojamiento = idAlojamiento;
	}

	@JSON
	@Override
	public Date getFechaEntrada() {
		return _fechaEntrada;
	}

	@Override
	public void setFechaEntrada(Date fechaEntrada) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_fechaEntrada = fechaEntrada;
	}

	@JSON
	@Override
	public Date getFechaSalida() {
		return _fechaSalida;
	}

	@Override
	public void setFechaSalida(Date fechaSalida) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_fechaSalida = fechaSalida;
	}

	@JSON
	@Override
	public int getHabitaciones() {
		return _habitaciones;
	}

	@Override
	public void setHabitaciones(int habitaciones) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_habitaciones = habitaciones;
	}

	@JSON
	@Override
	public int getPersonas() {
		return _personas;
	}

	@Override
	public void setPersonas(int personas) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_personas = personas;
	}

	@Override
	public StagedModelType getStagedModelType() {
		return new StagedModelType(
			PortalUtil.getClassNameId(Reserva.class.getName()));
	}

	public long getColumnBitmask() {
		if (_columnBitmask > 0) {
			return _columnBitmask;
		}

		if ((_columnOriginalValues == null) ||
			(_columnOriginalValues == Collections.EMPTY_MAP)) {

			return 0;
		}

		for (Map.Entry<String, Object> entry :
				_columnOriginalValues.entrySet()) {

			if (!Objects.equals(
					entry.getValue(), getColumnValue(entry.getKey()))) {

				_columnBitmask |= _columnBitmasks.get(entry.getKey());
			}
		}

		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(
			getCompanyId(), Reserva.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public Reserva toEscapedModel() {
		if (_escapedModel == null) {
			Function<InvocationHandler, Reserva>
				escapedModelProxyProviderFunction =
					EscapedModelProxyProviderFunctionHolder.
						_escapedModelProxyProviderFunction;

			_escapedModel = escapedModelProxyProviderFunction.apply(
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		ReservaImpl reservaImpl = new ReservaImpl();

		reservaImpl.setUuid(getUuid());
		reservaImpl.setIdReserva(getIdReserva());
		reservaImpl.setGroupId(getGroupId());
		reservaImpl.setCompanyId(getCompanyId());
		reservaImpl.setUserId(getUserId());
		reservaImpl.setUserName(getUserName());
		reservaImpl.setCreateDate(getCreateDate());
		reservaImpl.setModifiedDate(getModifiedDate());
		reservaImpl.setNombre(getNombre());
		reservaImpl.setApellidos(getApellidos());
		reservaImpl.setEmail(getEmail());
		reservaImpl.setIdAlojamiento(getIdAlojamiento());
		reservaImpl.setFechaEntrada(getFechaEntrada());
		reservaImpl.setFechaSalida(getFechaSalida());
		reservaImpl.setHabitaciones(getHabitaciones());
		reservaImpl.setPersonas(getPersonas());

		reservaImpl.resetOriginalValues();

		return reservaImpl;
	}

	@Override
	public Reserva cloneWithOriginalValues() {
		ReservaImpl reservaImpl = new ReservaImpl();

		reservaImpl.setUuid(this.<String>getColumnOriginalValue("uuid_"));
		reservaImpl.setIdReserva(
			this.<Long>getColumnOriginalValue("idReserva"));
		reservaImpl.setGroupId(this.<Long>getColumnOriginalValue("groupId"));
		reservaImpl.setCompanyId(
			this.<Long>getColumnOriginalValue("companyId"));
		reservaImpl.setUserId(this.<Long>getColumnOriginalValue("userId"));
		reservaImpl.setUserName(
			this.<String>getColumnOriginalValue("userName"));
		reservaImpl.setCreateDate(
			this.<Date>getColumnOriginalValue("createDate"));
		reservaImpl.setModifiedDate(
			this.<Date>getColumnOriginalValue("modifiedDate"));
		reservaImpl.setNombre(this.<String>getColumnOriginalValue("nombre"));
		reservaImpl.setApellidos(
			this.<String>getColumnOriginalValue("apellidos"));
		reservaImpl.setEmail(this.<String>getColumnOriginalValue("email"));
		reservaImpl.setIdAlojamiento(
			this.<Long>getColumnOriginalValue("idAlojamiento"));
		reservaImpl.setFechaEntrada(
			this.<Date>getColumnOriginalValue("fechaEntrada"));
		reservaImpl.setFechaSalida(
			this.<Date>getColumnOriginalValue("fechaSalida"));
		reservaImpl.setHabitaciones(
			this.<Integer>getColumnOriginalValue("habitaciones"));
		reservaImpl.setPersonas(
			this.<Integer>getColumnOriginalValue("personas"));

		return reservaImpl;
	}

	@Override
	public int compareTo(Reserva reserva) {
		int value = 0;

		value = getNombre().compareTo(reserva.getNombre());

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object object) {
		if (this == object) {
			return true;
		}

		if (!(object instanceof Reserva)) {
			return false;
		}

		Reserva reserva = (Reserva)object;

		long primaryKey = reserva.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isEntityCacheEnabled() {
		return true;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isFinderCacheEnabled() {
		return true;
	}

	@Override
	public void resetOriginalValues() {
		_columnOriginalValues = Collections.emptyMap();

		_setModifiedDate = false;

		_columnBitmask = 0;
	}

	@Override
	public CacheModel<Reserva> toCacheModel() {
		ReservaCacheModel reservaCacheModel = new ReservaCacheModel();

		reservaCacheModel.uuid = getUuid();

		String uuid = reservaCacheModel.uuid;

		if ((uuid != null) && (uuid.length() == 0)) {
			reservaCacheModel.uuid = null;
		}

		reservaCacheModel.idReserva = getIdReserva();

		reservaCacheModel.groupId = getGroupId();

		reservaCacheModel.companyId = getCompanyId();

		reservaCacheModel.userId = getUserId();

		reservaCacheModel.userName = getUserName();

		String userName = reservaCacheModel.userName;

		if ((userName != null) && (userName.length() == 0)) {
			reservaCacheModel.userName = null;
		}

		Date createDate = getCreateDate();

		if (createDate != null) {
			reservaCacheModel.createDate = createDate.getTime();
		}
		else {
			reservaCacheModel.createDate = Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			reservaCacheModel.modifiedDate = modifiedDate.getTime();
		}
		else {
			reservaCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		reservaCacheModel.nombre = getNombre();

		String nombre = reservaCacheModel.nombre;

		if ((nombre != null) && (nombre.length() == 0)) {
			reservaCacheModel.nombre = null;
		}

		reservaCacheModel.apellidos = getApellidos();

		String apellidos = reservaCacheModel.apellidos;

		if ((apellidos != null) && (apellidos.length() == 0)) {
			reservaCacheModel.apellidos = null;
		}

		reservaCacheModel.email = getEmail();

		String email = reservaCacheModel.email;

		if ((email != null) && (email.length() == 0)) {
			reservaCacheModel.email = null;
		}

		reservaCacheModel.idAlojamiento = getIdAlojamiento();

		Date fechaEntrada = getFechaEntrada();

		if (fechaEntrada != null) {
			reservaCacheModel.fechaEntrada = fechaEntrada.getTime();
		}
		else {
			reservaCacheModel.fechaEntrada = Long.MIN_VALUE;
		}

		Date fechaSalida = getFechaSalida();

		if (fechaSalida != null) {
			reservaCacheModel.fechaSalida = fechaSalida.getTime();
		}
		else {
			reservaCacheModel.fechaSalida = Long.MIN_VALUE;
		}

		reservaCacheModel.habitaciones = getHabitaciones();

		reservaCacheModel.personas = getPersonas();

		return reservaCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<Reserva, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(5 * attributeGetterFunctions.size()) + 2);

		sb.append("{");

		for (Map.Entry<String, Function<Reserva, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<Reserva, Object> attributeGetterFunction =
				entry.getValue();

			sb.append("\"");
			sb.append(attributeName);
			sb.append("\": ");

			Object value = attributeGetterFunction.apply((Reserva)this);

			if (value == null) {
				sb.append("null");
			}
			else if (value instanceof Blob || value instanceof Date ||
					 value instanceof Map || value instanceof String) {

				sb.append(
					"\"" + StringUtil.replace(value.toString(), "\"", "'") +
						"\"");
			}
			else {
				sb.append(value);
			}

			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	private static class EscapedModelProxyProviderFunctionHolder {

		private static final Function<InvocationHandler, Reserva>
			_escapedModelProxyProviderFunction =
				ProxyUtil.getProxyProviderFunction(
					Reserva.class, ModelWrapper.class);

	}

	private String _uuid;
	private long _idReserva;
	private long _groupId;
	private long _companyId;
	private long _userId;
	private String _userName;
	private Date _createDate;
	private Date _modifiedDate;
	private boolean _setModifiedDate;
	private String _nombre;
	private String _apellidos;
	private String _email;
	private long _idAlojamiento;
	private Date _fechaEntrada;
	private Date _fechaSalida;
	private int _habitaciones;
	private int _personas;

	public <T> T getColumnValue(String columnName) {
		columnName = _attributeNames.getOrDefault(columnName, columnName);

		Function<Reserva, Object> function = _attributeGetterFunctions.get(
			columnName);

		if (function == null) {
			throw new IllegalArgumentException(
				"No attribute getter function found for " + columnName);
		}

		return (T)function.apply((Reserva)this);
	}

	public <T> T getColumnOriginalValue(String columnName) {
		if (_columnOriginalValues == null) {
			return null;
		}

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		return (T)_columnOriginalValues.get(columnName);
	}

	private void _setColumnOriginalValues() {
		_columnOriginalValues = new HashMap<String, Object>();

		_columnOriginalValues.put("uuid_", _uuid);
		_columnOriginalValues.put("idReserva", _idReserva);
		_columnOriginalValues.put("groupId", _groupId);
		_columnOriginalValues.put("companyId", _companyId);
		_columnOriginalValues.put("userId", _userId);
		_columnOriginalValues.put("userName", _userName);
		_columnOriginalValues.put("createDate", _createDate);
		_columnOriginalValues.put("modifiedDate", _modifiedDate);
		_columnOriginalValues.put("nombre", _nombre);
		_columnOriginalValues.put("apellidos", _apellidos);
		_columnOriginalValues.put("email", _email);
		_columnOriginalValues.put("idAlojamiento", _idAlojamiento);
		_columnOriginalValues.put("fechaEntrada", _fechaEntrada);
		_columnOriginalValues.put("fechaSalida", _fechaSalida);
		_columnOriginalValues.put("habitaciones", _habitaciones);
		_columnOriginalValues.put("personas", _personas);
	}

	private static final Map<String, String> _attributeNames;

	static {
		Map<String, String> attributeNames = new HashMap<>();

		attributeNames.put("uuid_", "uuid");

		_attributeNames = Collections.unmodifiableMap(attributeNames);
	}

	private transient Map<String, Object> _columnOriginalValues;

	public static long getColumnBitmask(String columnName) {
		return _columnBitmasks.get(columnName);
	}

	private static final Map<String, Long> _columnBitmasks;

	static {
		Map<String, Long> columnBitmasks = new HashMap<>();

		columnBitmasks.put("uuid_", 1L);

		columnBitmasks.put("idReserva", 2L);

		columnBitmasks.put("groupId", 4L);

		columnBitmasks.put("companyId", 8L);

		columnBitmasks.put("userId", 16L);

		columnBitmasks.put("userName", 32L);

		columnBitmasks.put("createDate", 64L);

		columnBitmasks.put("modifiedDate", 128L);

		columnBitmasks.put("nombre", 256L);

		columnBitmasks.put("apellidos", 512L);

		columnBitmasks.put("email", 1024L);

		columnBitmasks.put("idAlojamiento", 2048L);

		columnBitmasks.put("fechaEntrada", 4096L);

		columnBitmasks.put("fechaSalida", 8192L);

		columnBitmasks.put("habitaciones", 16384L);

		columnBitmasks.put("personas", 32768L);

		_columnBitmasks = Collections.unmodifiableMap(columnBitmasks);
	}

	private long _columnBitmask;
	private Reserva _escapedModel;

}